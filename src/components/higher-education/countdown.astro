<section class="w-full bg-white" id="counter">
  <div
    class="container grid h-auto grid-cols-3 justify-between gap-1 py-24 max-md:py-16"
  >
    <div class="flex flex-col items-center text-center">
      <h3
        class="text-cpurple-300 counter__number text-xl font-bold min-md:text-4xl"
        data-symbol="%"
        data-val="100"
      >
        0
      </h3>
      <p
        class="text-cpurple-300 w-full text-xs font-normal text-balance md:text-base lg:max-w-60"
      >
        Of our degree students graduate with industry experience
      </p>
    </div>
    <div class="flex flex-col items-center text-center">
      <h3
        class="text-cpurple-300 counter__number text-xl font-bold min-md:text-4xl"
        data-symbol="%"
        data-val="100"
      >
        0
      </h3>
      <p
        class="text-cpurple-300 w-full text-xs font-normal text-balance md:text-base lg:max-w-60"
      >
        Graduates who are engaged in or available for work.
      </p>
    </div>
    <div class="flex flex-col items-center text-center">
      <h3
        class="text-cpurple-300 counter__number text-xl font-bold min-md:text-4xl"
        data-symbol="TOP"
        data-val="8"
      >
        0
      </h3>
      <p
        class="text-cpurple-300 w-full text-xs font-normal text-balance md:text-base lg:max-w-60"
      >
        Employment in Australian higher education
      </p>
    </div>
  </div>
</section>

<script type="module" is:inline>
  // Marca el script como del lado del cliente
  export default function initCounter() {
    const counterSection = document.getElementById("counter");
    const numCounters = document.querySelectorAll(".counter__number");

    const animateCounters = () => {
      numCounters.forEach((counter) => {
        const updateCount = () => {
          const target = parseInt(counter.getAttribute("data-val") || "0");
          const targetSymbol = counter.getAttribute("data-symbol");
          const count = parseInt(counter.textContent || "0");
          const speed = 200;
          const increment = target / speed;

          if (count < target) {
            counter.textContent =
              targetSymbol !== "%"
                ? `${targetSymbol} ` + Math.ceil(count + increment).toString()
                : Math.ceil(count + increment).toString() + ` ${targetSymbol}`;

            setTimeout(updateCount, 1);
          } else {
            counter.textContent =
              targetSymbol !== "%"
                ? `${targetSymbol} ` + target.toString()
                : target.toString() + ` ${targetSymbol}`;
          }
        };
        updateCount();
      });
    };

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            animateCounters();
            observer.disconnect();
          }
        });
      },
      {
        root: null,
        threshold: 0.7,
      },
    );

    if (counterSection) {
      observer.observe(counterSection);
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    initCounter();
  });
</script>
