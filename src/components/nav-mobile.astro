---
import { Icon } from "astro-icon/components";
import { ROUTES } from "@/lib/constants";
import { formatText, hasSubMenus } from "@/utils/nav";
---

<div
  class="fixed bottom-0 left-0 right-28 top-16 z-50 -translate-x-full transform bg-black transition-transform duration-150"
  id="nav-mobile"
>
  <nav class="relative flex flex-col text-[10px]" id="mobile-nav">
    {
      Object.entries(ROUTES.NAV_LINKS).map(([key, value]) =>
        hasSubMenus(value) ? (
          // With submenus
          <div class="menu-item relative" data-menu-level="1">
            <span class="flex h-full items-center justify-between px-4 py-4 transition-colors">
              <span class="flex">
                <Icon
                  name={`navbar/${formatText(key).toLowerCase()}`}
                  class="mr-2 size-2.5 rotate-[-40deg]"
                  aria-hidden="true"
                />
                {formatText(key)}
              </span>

              <Icon
                name="navbar/chevron"
                class="size-2.5 text-cmutted-foreground"
              />
            </span>
            <div class="submenu absolute left-5 top-full z-50 hidden min-w-[200px] bg-black shadow-lg">
              {Object.entries(value).map(([subKey, subValue]) =>
                hasSubMenus(subValue) ? (
                  <div
                    class="submenu-item relative border-t border-cmutted-foreground/30"
                    data-menu-level="2"
                  >
                    <span class="flex justify-between px-4 py-3 font-semibold transition-colors">
                      {formatText(subKey)}
                      <Icon
                        name="navbar/chevron"
                        class="size-2.5 text-cmutted-foreground"
                      />
                    </span>
                    <div class="submenu absolute left-full top-0 hidden min-w-max bg-black shadow-lg">
                      {Object.entries(subValue).map(
                        ([subSubKey, subSubValue]) => (
                          <a
                            href={subSubValue as string}
                            class="block border-t border-cmutted-foreground/30 px-4 py-3 font-semibold text-cmutted-foreground transition-colors hover:text-white"
                            aria-label={formatText(subSubKey)}
                          >
                            {formatText(subSubKey)}
                          </a>
                        ),
                      )}
                    </div>
                  </div>
                ) : (
                  <a
                    href={subValue as string}
                    class="block px-4 py-3 font-semibold hover:text-czyan"
                    aria-label={formatText(subValue)}
                  >
                    {formatText(subKey)}
                  </a>
                ),
              )}
            </div>
          </div>
        ) : (
          // Normal items
          <a
            href={value as string}
            class="after-star flex items-center px-4 py-4 transition-colors last-of-type:relative last-of-type:bg-cpurple-100 hover:bg-cpurple-200 [&:first-of-type>svg]:skew-x-[-18deg]"
            aria-label={formatText(value as string)}
          >
            <Icon
              name={`navbar/${formatText(key).toLowerCase()}`}
              class="mr-2 size-2"
            />
            {formatText(key)}
          </a>
        ),
      )
    }
  </nav>
  <nav class="absolute bottom-10 flex w-full justify-center gap-x-4">
    {
      Object.entries(ROUTES.SOCIALS).map(([key, value]) => (
        <a
          href={value}
          aria-label={formatText(key)}
          class="transition-opacity hover:opacity-80"
          target="_blank"
        >
          <Icon
            name={`socials/${formatText(key).toLowerCase()}`}
            class="size-8"
          />
        </a>
      ))
    }
  </nav>
</div>

<script>
  function initializeMobileNav() {
    const nav = document.getElementById("mobile-nav");
    let activeSubmenu: Element | null = null;
    let activeMenuItems: Element[] = [];

    // Función para remover todas las clases activas
    function removeActiveClasses() {
      activeMenuItems.forEach((item) => {
        const span = item.querySelector("span");
        if (span) {
          span.classList.remove("bg-cpurple-200"); // Para items de nivel 1
          span.classList.remove("text-czyan"); // Para subitems
        }
      });
      activeMenuItems = [];
    }

    // Función para cerrar todos los submenús
    function closeAllSubmenus() {
      const submenus = nav?.querySelectorAll(".submenu");
      submenus?.forEach((submenu) => {
        submenu.classList.add("hidden");
      });
      activeSubmenu = null;
      removeActiveClasses();
    }

    // Manejador de clicks para los items del menú
    nav?.addEventListener("click", (e) => {
      const target = e.target as Element;
      const menuItem = target.closest(".menu-item, .submenu-item");

      if (!menuItem) return;

      e.stopPropagation();

      const submenu = menuItem.querySelector(".submenu");
      if (!submenu) return;

      const level = menuItem.getAttribute("data-menu-level");
      const span = menuItem.querySelector("span");

      // Si hay un submenú activo diferente al actual, ciérralo
      if (activeSubmenu && activeSubmenu !== submenu) {
        if (activeSubmenu.closest(`[data-menu-level="${level}"]`)) {
          activeSubmenu.classList.add("hidden");
          // Remover clases activas del mismo nivel
          activeMenuItems
            .filter((item) => item.getAttribute("data-menu-level") === level)
            .forEach((item) => {
              const itemSpan = item.querySelector("span");
              if (itemSpan) {
                itemSpan.classList.remove("bg-cpurple-200");
                itemSpan.classList.remove("text-czyan");
              }
            });
        }
      }

      // Toggle del submenú actual
      const isHidden = submenu.classList.toggle("hidden");

      // Manejar clases activas
      if (span) {
        if (!isHidden) {
          // Activar
          if (level === "1") {
            span.classList.add("bg-cpurple-200");
          } else {
            span.classList.add("text-czyan");
          }
          activeMenuItems.push(menuItem);
        } else {
          // Desactivar
          if (level === "1") {
            span.classList.remove("bg-cpurple-200");
          } else {
            span.classList.remove("text-czyan");
          }
          activeMenuItems = activeMenuItems.filter((item) => item !== menuItem);
        }
      }

      activeSubmenu = isHidden ? null : submenu;
    });

    // Cerrar submenús cuando se hace click fuera del nav
    document.addEventListener("click", (e) => {
      const target = e.target as Element;
      if (!nav?.contains(target)) {
        closeAllSubmenus();
      }
    });
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", initializeMobileNav);
</script>
