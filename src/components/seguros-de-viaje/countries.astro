<section
  class="section-1 relative z-0 container mx-auto flex flex-col items-center justify-center gap-10 pt-28 pb-16 lg:min-h-dvh"
>
  <p class="text-heading-2 first-text text-center animate-slide-up-fade">
    Tenemos el seguro mÃ©dico internacional que necesitas para cumplir con los
    requisitos de tu visa de estudiante o turista, ya sea que viajes a:
  </p>

  <div
    class="selector-container relative mx-auto w-full space-y-6 lg:space-y-12"
  >
    <ul
      class="selector text-heading-2 relative min-h-12 overflow-hidden text-center lg:min-h-24"
    >
      <li class="li-item absolute top-0 left-0 w-full opacity-0">
        ðŸ‡¬ðŸ‡§ Reino Unido
      </li>
      <li class="li-item absolute top-0 left-0 w-full opacity-0">
        ðŸ‡¦ðŸ‡º Australia (OSHC)
      </li>
      <li class="li-item absolute top-0 left-0 w-full opacity-0">
        ðŸ‡³ðŸ‡¿ Nueva Zelanda
      </li>
      <li class="li-item absolute top-0 left-0 w-full opacity-0">ðŸ‡ªðŸ‡¸ EspaÃ±a</li>
      <li class="li-item absolute top-0 left-0 w-full opacity-0">
        ...o cualquier otro destino.
      </li>
    </ul>

    <ul
      class="insurance flex flex-col justify-center gap-6 text-lg lg:flex-row lg:*:text-2xl"
    >
      <li>âœ… Seguro para estudiantes internacionales</li>
      <li>âœ… Seguro para turistas</li>
      <li>
        âœ… 100% online y aprobado por gobiernos e instituciones educativas
      </li>
    </ul>
  </div>
</section>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { SplitText } from "gsap/SplitText";

  gsap.registerPlugin(ScrollTrigger, SplitText);

  // Split text for the first paragraph
  let splitFirstText = SplitText.create(".first-text", { type: "words" });

  // Split text for each list element
  let listSplits: SplitText[] = [];
  const items = gsap.utils.toArray(".li-item");

  items.forEach((item) => {
    const split = new SplitText(item as Element, { type: "lines" });
    listSplits.push(split);
  });

  // Get the insurance elements
  const secureItems = gsap.utils.toArray(".insurance li");

  // Calcular duraciones
  const itemCount = items.length;
  const secureItemCount = secureItems.length;
  const baseScrollHeight = 800;
  const heightPerItem = 600;
  const heightForInsure = secureItemCount * 300 + 400;
  const totalPinHeight =
    baseScrollHeight + heightPerItem * itemCount + heightForInsure;

  // Set all elements initially invisible
  gsap.set(items, { autoAlpha: 0 });
  gsap.set(secureItems, { autoAlpha: 0, y: 20 });

  // Detectar si es mobile o desktop
  const isMobile = window.matchMedia("(max-width: 768px)").matches;

  let masterTl;

  if (isMobile) {
    // Timeline maestro para el resto de animaciones
    masterTl = gsap.timeline({
      scrollTrigger: {
        trigger: ".section-1",
        pin: ".section-1",
        start: "top top",
        end: `+=${totalPinHeight + 500}`,
        scrub: 1,
        pinSpacing: true,
        anticipatePin: 1,
        refreshPriority: 1,
        id: "masterTimeline",
        invalidateOnRefresh: true,
      },
    });
  } else {
    // Timeline maestro para desktop, incluyendo la animaciÃ³n de first-text
    masterTl = gsap.timeline({
      scrollTrigger: {
        trigger: ".section-1",
        pin: ".section-1",
        start: "top top",
        end: `+=${totalPinHeight + 500}`,
        scrub: 1,
        pinSpacing: true,
        anticipatePin: 1,
        refreshPriority: 1,
        id: "masterTimeline",
        invalidateOnRefresh: true,
      },
    });

    // AnimaciÃ³n de first-text como parte del timeline maestro
    masterTl.from(splitFirstText.words, {
      y: 20,
      autoAlpha: 0,
      stagger: 0.05,
      duration: 3,
    });
  }

  // AnimaciÃ³n de paÃ­ses y seguros (igual para ambos casos)
  items.forEach((item, index) => {
    const words = listSplits[index].lines;

    // Show current element
    masterTl.to(item as Element, {
      autoAlpha: 1,
      duration: 0.3,
      ease: "power2.inOut",
    });

    // Animate words of current element
    masterTl.from(words as Element[], {
      y: 15,
      autoAlpha: 0,
      stagger: 0.05,
      duration: 1.5,
      ease: "power1.out",
    });

    // Keep visible for a while
    masterTl.to({}, { duration: 2 });

    // If not the last element, hide it before showing the next one
    if (index < items.length - 1) {
      masterTl.to(item as Element, {
        autoAlpha: 0,
        duration: 0.8,
        ease: "power2.in",
      });
    }
  });

  // Insurance elements animation one by one
  secureItems.forEach((item, index) => {
    masterTl.to(item as Element, {
      autoAlpha: 1,
      y: 0,
      duration: 2,
      ease: "power2.out",
    });

    // If is the last, add more space to the pin
    if (index === secureItems.length - 1) {
      if(isMobile) {
        masterTl.to({}, { duration: 7 });
      }else {
        masterTl.to({}, { duration: 18 });
      }
    }

    // Add a small pause between elements
    if (index < secureItems.length - 1) {
      masterTl.to({}, { duration: 0.8 });
    }
  });
</script>
