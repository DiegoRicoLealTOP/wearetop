---
import Layout from "@/layouts/Layout.astro";
import Hero from "@/components/seguros-de-viaje/hero.astro";
---

<Layout title="Seguros de viaje - WeAreTop">
  <Hero />

  <section
    class="section-1 container flex min-h-dvh flex-col items-center justify-center gap-10"
  >
    <p class="text-heading-2 first-text text-center">
      Tenemos el seguro médico internacional que necesitas para cumplir con los
      requisitos de tu visa de estudiante o turista, ya sea que viajes a:
    </p>

    <div class="selector-container relative w-full">
      <ul
        class="selector text-heading-2 relative min-h-[6rem] overflow-hidden text-center"
      >
        <li class="li-item absolute top-0 left-0 w-full opacity-0">
          🇬🇧 Reino Unido
        </li>
        <li class="li-item absolute top-0 left-0 w-full opacity-0">
          🇦🇺 Australia (OSHC)
        </li>
        <li class="li-item absolute top-0 left-0 w-full opacity-0">
          🇳🇿 Nueva Zelanda
        </li>
        <li class="li-item absolute top-0 left-0 w-full opacity-0">
          🇪🇸 España
        </li>
        <li class="li-item absolute top-0 left-0 w-full opacity-0">
          ...o cualquier otro destino.
        </li>
      </ul>
    </div>
  </section>
</Layout>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { SplitText } from "gsap/SplitText";

  gsap.registerPlugin(ScrollTrigger, SplitText);

  // Split text para el primer párrafo
  let splitFirstText = SplitText.create(".first-text", { type: "words" });

  // Split text para cada elemento de la lista
  let listSplits: SplitText[] = [];
  const items = gsap.utils.toArray(".li-item");

  items.forEach((item) => {
    const split = new SplitText(item as Element, { type: "words" });
    listSplits.push(split);
  });

  // Calcular la duración del pin basado en el número de elementos
  const itemCount = items.length;
  // Base de scroll (primera animación + texto adicional)
  const baseScrollHeight = 1000;
  // Altura adicional por cada elemento de la lista (mostrar + animar + mantener + ocultar)
  const heightPerItem = 800;
  // Calcular la altura total
  const totalPinHeight = baseScrollHeight + heightPerItem * itemCount;

  // Animación para mantener la sección anclada durante todo el scroll
  gsap.from(".section-1", {
    ease: "none",
    scrollTrigger: {
      trigger: ".section-1",
      pin: true,
      scrub: 0.5,
      end: `+=${totalPinHeight}`,
    },
  });

  // Animación del texto principal
  const firstTextTl = gsap.timeline({
    scrollTrigger: {
      trigger: ".section-1",
      start: "top center",
      end: "+=1000",
      scrub: true,
      id: "firstText",
    },
  });

  firstTextTl.from(splitFirstText.words, {
    y: 20,
    autoAlpha: 0,
    stagger: 0.05,
  });

  // Timeline principal para manejar la secuencia de elementos li
  const listTl = gsap.timeline({
    scrollTrigger: {
      trigger: ".selector",
      start: "top center",
      end: `+=${heightPerItem * itemCount}`,
      scrub: true,
      id: "listItems",
    },
  });

  // Configurar todos los items inicialmente invisibles
  gsap.set(items, { autoAlpha: 0 });

  // Crear la secuencia de animación para cada elemento de la lista
  items.forEach((item, index) => {
    const words = listSplits[index].words;

    // Mostrar el elemento actual
    listTl.to(item as Element, {
      autoAlpha: 1,
      duration: 0.1,
      ease: "power2.inOut",
    });

    // Animar las palabras del elemento actual
    listTl.from(words as Element[], {
      y: 15,
      autoAlpha: 0,
      stagger: 0.05,
      duration: 0.5,
      ease: "power1.out",
    });

    // Mantener visible por un tiempo
    listTl.to({}, { duration: 1 });

    // Si no es el último elemento, esconderlo antes de mostrar el siguiente
    if (index < items.length - 1) {
      listTl.to(item as Element, {
        autoAlpha: 0,
        duration: 0.3,
        ease: "power2.in",
      });
    }
  });
</script>
